\x{}
\x { x*x }
\(x, y) { (x, y) }
\(x: int, y) { (x, y) }
\(x, y: float) { (x, y) }
\(x: string, y: bool) { (x, y) }
\(a: bool, b: null, c: int, d: float, e: string, f: Type, g: module.submodule.Type) {}
\(v = "default") {}
\(v: int = 7) {}
\(v: float = "x", p: string = null) {}

%output

Stmt
  kind: Expr
    kind: LambdaLiteral
      params: LambdaParams::Single
        name: "x"
      body: Stmt
        kind: StmtKind::Block
          statements=
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: LambdaParams::Single
        name: "x"
      body: Stmt
        kind: StmtKind::Block
          statements=
            Stmt
              kind: Expr
                kind: BinOp
                  kind: BinOpKind::Mul
                  left: Expr
                    kind: ExprKind::Identifier
                      name: "x"
                  right: Expr
                    kind: ExprKind::Identifier
                      name: "x"
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "x"
            ty: None
            value: None
          Param
            name: "y"
            ty: None
            value: None
      body: Stmt
        kind: StmtKind::Block
          statements=
            Stmt
              kind: Expr
                kind: Tuple::Tuple
                  elements=
                    Expr
                      kind: ExprKind::Identifier
                        name: "x"
                    Expr
                      kind: ExprKind::Identifier
                        name: "y"
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "x"
            ty: PrimitiveType::Int
            value: None
          Param
            name: "y"
            ty: None
            value: None
      body: Stmt
        kind: StmtKind::Block
          statements=
            Stmt
              kind: Expr
                kind: Tuple::Tuple
                  elements=
                    Expr
                      kind: ExprKind::Identifier
                        name: "x"
                    Expr
                      kind: ExprKind::Identifier
                        name: "y"
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "x"
            ty: None
            value: None
          Param
            name: "y"
            ty: PrimitiveType::Float
            value: None
      body: Stmt
        kind: StmtKind::Block
          statements=
            Stmt
              kind: Expr
                kind: Tuple::Tuple
                  elements=
                    Expr
                      kind: ExprKind::Identifier
                        name: "x"
                    Expr
                      kind: ExprKind::Identifier
                        name: "y"
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "x"
            ty: PrimitiveType::String
            value: None
          Param
            name: "y"
            ty: PrimitiveType::Bool
            value: None
      body: Stmt
        kind: StmtKind::Block
          statements=
            Stmt
              kind: Expr
                kind: Tuple::Tuple
                  elements=
                    Expr
                      kind: ExprKind::Identifier
                        name: "x"
                    Expr
                      kind: ExprKind::Identifier
                        name: "y"
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "a"
            ty: PrimitiveType::Bool
            value: None
          Param
            name: "b"
            ty: PrimitiveType::Null
            value: None
          Param
            name: "c"
            ty: PrimitiveType::Int
            value: None
          Param
            name: "d"
            ty: PrimitiveType::Float
            value: None
          Param
            name: "e"
            ty: PrimitiveType::String
            value: None
          Param
            name: "f"
            ty: PrimitiveType::Named
              name: Type
            value: None
          Param
            name: "g"
            ty: PrimitiveType::Named
              name: module.submodule.Type
            value: None
      body: Stmt
        kind: StmtKind::Block
          statements=
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "v"
            ty: None
            value: Expr
              kind: PrimitiveLiteral
                value: String("default")
      body: Stmt
        kind: StmtKind::Block
          statements=
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "v"
            ty: PrimitiveType::Int
            value: Expr
              kind: PrimitiveLiteral
                value: Int(7)
      body: Stmt
        kind: StmtKind::Block
          statements=
Stmt
  kind: Expr
    kind: LambdaLiteral
      params: ParameterList
        parameters=
          Param
            name: "v"
            ty: PrimitiveType::Float
            value: Expr
              kind: PrimitiveLiteral
                value: String("x")
          Param
            name: "p"
            ty: PrimitiveType::String
            value: Expr
              kind: PrimitiveLiteral
                value: Null
      body: Stmt
        kind: StmtKind::Block
          statements=