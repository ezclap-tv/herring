Let
  kind: Var
    ident: "v"
    value: Lit::Number
      value: 10
    type: None
  in: None
Let
  kind: Var
    ident: "v"
    value: Lit::Number
      value: 10
    type: Type::Ident
      ident: "int"
  in: None
Let
  kind: Var
    ident: "v"
    value: Lit::Bool
      value: true
    type: Type::Ident
      ident: "bool"
  in: None
Let
  kind: Var
    ident: "v"
    value: Lit::String
      value: "\"test\""
    type: Type::Ident
      ident: "str"
  in: None
Let
  kind: Var
    ident: "v"
    value: Lit::Record
      fields= 
        Field
          ident: "x"
          value: Lit::Number
            value: 10
        Field
          ident: "y"
          value: Lit::Number
            value: 10
    type: Type::Record
      fields= 
        tuple
          field0: "x"
          field1: Type::Ident
            ident: "int"
        tuple
          field0: "y"
          field1: Type::Ident
            ident: "int"
  in: None
Let
  kind: Func
    ident: "fib"
    param: tuple
      field0: "n"
      field1: Type::Ident
        ident: "int"
    ret: Type::Ident
      ident: "int"
    body: If
      cond: Binary
        op: BinaryOp::LessThan
        lhs: Use
          ident: "n"
        rhs: Lit::Number
          value: 2
      then: Use
        ident: "n"
      else: Binary
        op: BinaryOp::Mult
        lhs: Use
          ident: "n"
        rhs: Call
          func: Use
            ident: "fib"
          arg: Binary
            op: BinaryOp::Sub
            lhs: Use
              ident: "n"
            rhs: Lit::Number
              value: 1
  in: None
Call
  func: Use
    ident: "fib"
  arg: Access
    target: Use
      ident: "v"
    field: "x"
Let
  kind: Func
    ident: "print_square"
    param: tuple
      field0: "n"
      field1: Type::Ident
        ident: "int"
    ret: Type::Ident
      ident: "int"
    body: Let
      kind: Var
        ident: "r"
        value: Call
          func: Use
            ident: "intToStr"
          arg: Binary
            op: BinaryOp::Mult
            lhs: Use
              ident: "n"
            rhs: Use
              ident: "n"
        type: None
      in: Use
        ident: "print"
  in: None
Binary
  op: BinaryOp::Add
  lhs: Binary
    op: BinaryOp::Add
    lhs: Binary
      op: BinaryOp::Add
      lhs: Binary
        op: BinaryOp::Add
        lhs: Use
          ident: "n"
        rhs: Lit::String
          value: "\" * \""
      rhs: Use
        ident: "n"
    rhs: Lit::String
      value: "\" = \""
  rhs: Use
    ident: "r"