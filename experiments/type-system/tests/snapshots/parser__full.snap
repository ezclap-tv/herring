---
source: tests/parser.rs
expression: ast
---
- Let:
    kind:
      Var:
        ident:
          lexeme: v
          kind: Ident
        value:
          Lit:
            Number: 10
        type: ~
    in: ~
- Let:
    kind:
      Var:
        ident:
          lexeme: v
          kind: Ident
        value:
          Lit:
            Number: 10
        type:
          Ident:
            lexeme: int
            kind: Ident
    in: ~
- Let:
    kind:
      Var:
        ident:
          lexeme: v
          kind: Ident
        value:
          Lit:
            Bool: true
        type:
          Ident:
            lexeme: bool
            kind: Ident
    in: ~
- Let:
    kind:
      Var:
        ident:
          lexeme: v
          kind: Ident
        value:
          Lit:
            String: "\"test\""
        type:
          Ident:
            lexeme: str
            kind: Ident
    in: ~
- Let:
    kind:
      Var:
        ident:
          lexeme: v
          kind: Ident
        value:
          Lit:
            Record:
              - ident:
                  lexeme: x
                  kind: Ident
                value:
                  Lit:
                    Number: 10
              - ident:
                  lexeme: y
                  kind: Ident
                value:
                  Lit:
                    Number: 10
        type:
          Record:
            - - lexeme: x
                kind: Ident
              - Ident:
                  lexeme: int
                  kind: Ident
            - - lexeme: y
                kind: Ident
              - Ident:
                  lexeme: int
                  kind: Ident
    in: ~
- Let:
    kind:
      Func:
        ident:
          lexeme: fib
          kind: Ident
        param:
          - lexeme: n
            kind: Ident
          - Ident:
              lexeme: int
              kind: Ident
        ret:
          Ident:
            lexeme: int
            kind: Ident
        body:
          If:
            cond:
              Binary:
                op: LessThan
                lhs:
                  Use:
                    ident:
                      lexeme: n
                      kind: Ident
                rhs:
                  Lit:
                    Number: 2
            then:
              Use:
                ident:
                  lexeme: n
                  kind: Ident
            else:
              Binary:
                op: Mult
                lhs:
                  Use:
                    ident:
                      lexeme: n
                      kind: Ident
                rhs:
                  Call:
                    func:
                      Use:
                        ident:
                          lexeme: fib
                          kind: Ident
                    arg:
                      Binary:
                        op: Sub
                        lhs:
                          Use:
                            ident:
                              lexeme: n
                              kind: Ident
                        rhs:
                          Lit:
                            Number: 1
    in: ~
- Call:
    func:
      Use:
        ident:
          lexeme: fib
          kind: Ident
    arg:
      Access:
        target:
          Use:
            ident:
              lexeme: v
              kind: Ident
        field:
          lexeme: x
          kind: Ident
- Let:
    kind:
      Func:
        ident:
          lexeme: print_square
          kind: Ident
        param:
          - lexeme: n
            kind: Ident
          - Ident:
              lexeme: int
              kind: Ident
        ret:
          Ident:
            lexeme: int
            kind: Ident
        body:
          Let:
            kind:
              Var:
                ident:
                  lexeme: r
                  kind: Ident
                value:
                  Call:
                    func:
                      Use:
                        ident:
                          lexeme: intToStr
                          kind: Ident
                    arg:
                      Binary:
                        op: Mult
                        lhs:
                          Use:
                            ident:
                              lexeme: n
                              kind: Ident
                        rhs:
                          Use:
                            ident:
                              lexeme: n
                              kind: Ident
                type: ~
            in:
              Call:
                func:
                  Use:
                    ident:
                      lexeme: print
                      kind: Ident
                arg:
                  Binary:
                    op: Add
                    lhs:
                      Binary:
                        op: Add
                        lhs:
                          Binary:
                            op: Add
                            lhs:
                              Binary:
                                op: Add
                                lhs:
                                  Use:
                                    ident:
                                      lexeme: n
                                      kind: Ident
                                rhs:
                                  Lit:
                                    String: "\" * \""
                            rhs:
                              Use:
                                ident:
                                  lexeme: n
                                  kind: Ident
                        rhs:
                          Lit:
                            String: "\" = \""
                    rhs:
                      Use:
                        ident:
                          lexeme: r
                          kind: Ident
    in: ~
- Let:
    kind:
      Func:
        ident:
          lexeme: unwrap
          kind: Ident
        param:
          - lexeme: r
            kind: Ident
          - Record:
              - - lexeme: v
                  kind: Ident
                - Ident:
                    lexeme: int
                    kind: Ident
        ret:
          Ident:
            lexeme: int
            kind: Ident
        body:
          Access:
            target:
              Use:
                ident:
                  lexeme: r
                  kind: Ident
            field:
              lexeme: v
              kind: Ident
    in: ~
- Call:
    func:
      Use:
        ident:
          lexeme: print
          kind: Ident
    arg:
      Call:
        func:
          Use:
            ident:
              lexeme: unwrap
              kind: Ident
        arg:
          Lit:
            Record:
              - ident:
                  lexeme: v
                  kind: Ident
                value:
                  Lit:
                    Number: 10

